✅ 1. What is Migration?
Migration is the process of updating your database schema (like adding tables, columns, constraints, etc.) 
without losing existing data.

✅ 2. What is Flask-Migrate?
Flask-Migrate is a Flask wrapper around Alembic, a powerful database migration tool for SQLAlchemy.
With Flask-Migrate, you can:
Detect changes in models
Generate migration scripts
Apply those changes to the database
Maintain a version history of your schema
✅ Helps in development: Easily test schema changes
✅ Helps in production: Apply updates without dropping tables or data loss

3. Alembic is basically a version control system for your database schema — kind of like Git, but for your tables, 
columns, indexes, and constraints.

4.✅ Where Alembic can be used
Frameworks: Flask, FastAPI, Pyramid, bare Python scripts, etc.
Databases: SQLite, PostgreSQL, MySQL, MariaDB, Oracle, MS SQL Server, etc.
ORM: Works with SQLAlchemy ORM or SQLAlchemy Core.

SQLAlchemy is a Python-only ORM (Object Relational Mapper) and database toolkit.
It’s designed specifically for Python, so you can’t directly use SQLAlchemy in Java, JavaScript, C#, or other languages.

Here’s a quick breakdown:

What SQLAlchemy does
Lets you write Python classes to represent database tables (ORM).
Lets you run SQL queries in Python without manually writing SQL strings (though you still can if you want).

Works with many databases:
SQLite
MySQL / MariaDB
PostgreSQL
Oracle
MS SQL Servee

Has two parts:
Core → Low-level SQL expression language (like building SQL queries programmatically).
ORM → Maps Python classes ↔ database tables.

Why it’s Python-only
SQLAlchemy is built on top of Python’s DB-API 2.0 standard.
It integrates tightly with Python syntax and data types.
Other languages have their own ORMs (e.g., Hibernate for Java, Sequelize for JavaScript, Entity Framework for C#).

💡 Alembic (which we discussed earlier) is a migration tool built specifically for SQLAlchemy, so it’s also 
Python-only.

'''Flask-Migrate is a python package that configures SQLAlchemy and Alembic for your Flask application. 
Alembic is the migration tool that actually takes care of database migrations under the hood. 
It can automatically generate migration files based on database schema models, and apply those migrations to 
databases. 
This is truly powerful, since it enables you to have a single source of truth and a history of your database 
changes in source control. 
Using a database migration tool, you are able to easily upgrade or downgrade database changes, or even rebuild your 
database.'''


✅ 3. How to Set Up Flask-Migrate
🔧 Step-by-step setup:
🧩 Step 1: Install the required packages

pip install flask-migrate
🧩 Step 2: Update app.py to include Migrate

from flask_migrate import Migrate  # 👈 Add this

migrate = Migrate()  # 👈 Add this

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)

    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)  # 👈 Initialize migrate with app and db
    return app

🧩 Step 3: Initialize the migration folder
In terminal (at your project root):
flask --app app:create_app db init
👉 This creates a new folder called migrations/ to store migration history.

🧩 Step 4: Generate the migration script

flask --app app:create_app db migrate -m "Initial migration"
✅ It auto-detects model changes and generates migration scripts.

🧩 Step 5: Apply migrations to the database

flask --app app:create_app db upgrade
✅ This will create the tables in your database (just like create_all(), but smarter and versioned).

🧩 Optional: See current migration status
flask --app app:create_app db current


✅ When You Create or Modify a Model in the Future
Let’s say you add a new table or column in your models.py, for example:

🔁 Step 1: Generate a new migration script

flask --app app:create_app db migrate -m "Added Portfolio table"
🧠 What happens here:
Flask-Migrate scans all your models.
It compares the changes with the last applied migration.
It generates a new migration file (e.g., migrations/versions/xyz_added_portfolio_table.py).

✅ Step 2: Apply the migration to update your actual database

flask --app app:create_app db upgrade
🎯 This executes the migration script and applies your model changes to the real database.

🔄 If you want to rollback a migration (undo)

flask --app app:create_app db downgrade
You can also specify a number of steps:

flask --app app:create_app db downgrade -1  # go back 1 migration
👀 To view migration history

flask --app app:create_app db history


🧪 Why it’s useful
You can track DB schema changes over time
Rollback migrations if something breaks
Share migrations with teammates just like code commits
Maintain consistency between development, staging, and production databases


