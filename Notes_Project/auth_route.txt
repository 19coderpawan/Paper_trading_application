****from flask import Blueprint, render_template, redirect, url_for, flash****

Blueprint: Allows you to organize routes into components. Here, all authentication routes are grouped under auth.
render_template: Renders HTML templates (like login.html, register.html).
redirect: Redirects the user to a new route after an action.
url_for: Dynamically builds the URL for a route by its function name.
flash: Displays one-time messages to the user (e.g., "Logged in successfully").

🧠 What flash() actually does:
It adds a message to the session (temporarily).
You can then access and display it in your template using get_flashed_messages().
The first argument is the message to be flashed, and the second argument ('success') is the category of the message.

🔍 What is a flash category?
The category helps you style or filter messages in your HTML templates.
Common categories include:
'success' ✅ — for green success messages
'error' ❌ — for red error messages
'warning' ⚠️ — for yellow warning messages
'info' ℹ️ — for blue or neutral messages



***from flask_login import login_user, logout_user, login_required***
login_user(user): Logs in the given user.
logout_user(): Logs the current user out.
login_required: Decorator to protect routes — only accessible if user is logged in.

****if form.validate_on_submit():
        user=User.query.filter_by(email=form.email.data).first()
        if user and check_password_hash(user.password,form.password.data):
            login_user(user) #Logs the user in (creates a session using Flask-Login).
            flash("Successfully logedin!",'success')
            return redirect(url_for('home_route.dashboard'))
        flash("Invalid credentials ",'danger')   
            
    return render_template('login.html',form=form)*****

explanation-: 
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
->Find the user by the email entered in the form.
        if user and check_password_hash(user.password, form.password.data):
->If user exists and password matches after hashing:
            login_user(user)
->Logs the user in (creates a session using Flask-Login).
            flash('Logged in successfully.', 'success')
            return redirect(url_for('home.dashboard'))
->Redirects to the dashboard route defined in your home blueprint.
        flash('Login failed.', 'danger')
->If login fails, show an error message.
    return render_template('login.html', form=form)
->Renders login form on GET or failed validation.    



✅ What is Flask-Login?
Flask-Login is a Flask extension that handles user session management — i.e., logging users in and out, 
remembering them across requests, and protecting views that require authentication.

🔐 login_user(user)
▶️ What it does:
Logs in a user and creates a session.
Sets a secure session cookie so the user stays logged in across pages.
Works with your User model if it inherits from UserMixin (required).
✅ Requirements:
Your User model must implement these properties (inherited from UserMixin):
is_authenticated
is_active
is_anonymous
get_id() — returns a unique ID (usually id)

🚪 logout_user()
▶️ What it does:
Ends the user’s session.
Clears the session cookie.
The user becomes unauthenticated (current_user.is_authenticated becomes False).

🧠 Bonus: @login_required
Use this decorator to protect routes from unauthorized access.
from flask_login import login_required
@app.route('/dashboard')
@login_required
def dashboard():
    return "Welcome, you are logged in!"
If a user tries to access this without logging in, they are redirected to the login page.



🔐 What is a Session in Flask?
A session is a way to store information about a user across multiple requests — like whether they’re logged in or not.
In technical terms:
A session is a temporary, secure storage mechanism that allows Flask to remember data (like user ID or preferences) 
between HTTP requests.
Flask stores session data on the client side, using a secure cookie.

🧠 Where does session come in?
When you call:
✅ login_user(user)
This logs in the user by:
Storing the user's ID in the Flask session cookie.
Creating a user session that lasts until the user logs out or the browser is closed (unless configured otherwise).
From now on, current_user will return this logged-in user.

✅ logout_user()
This logs out the user by:
Clearing the session data (i.e., removing the stored user ID).
Making current_user anonymous again.
Essentially ends the "user session".